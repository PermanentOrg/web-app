name: Dev build

on:
  push:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm install

      - name: Build
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY_DEV }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY_DEV }}
          STRIPE_API_KEY: ${{ secrets.STRIPE_TEST_KEY }}
        run: npm run build:dev

      - name: Archive `dist`
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  upload-sourcemaps:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Setup Sentry CLI
        uses: mathrix-education/setup-sentry-cli@1.0.0
        with:
          token: ${{ secrets.SENTRY_TOKEN }}
          organization: permanentorg
          project: mdot

      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Upload sourcemaps
        shell: bash
        run: |
          cp -r dist/mdot dist/app
          cp -r dist/mdot dist/share
          cp -r dist/mdot dist/p
          declare -x VERSION=mdot@$(jq -r '.version' package.json)
          sentry-cli releases set-commits $VERSION --auto
          sentry-cli releases files $VERSION upload-sourcemaps --rewrite --validate --verbose --strip-common-prefix ./dist/ --ignore mdot

  upload-code:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist

      - name: Create a tar archive
        run: |
          cd ..
          mkdir mdot
          mv web-app/dist mdot/dist
          tar -czvf mdot.tar.gz mdot

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Copy package to S3
        run: aws s3 cp ../mdot.tar.gz s3://permanent-repos/dev/mdot.tar.gz
